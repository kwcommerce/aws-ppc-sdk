# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.sd_audience_category_recommendations import SDAudienceCategoryRecommendations
from openapi_client.models.sd_category_recommendation_v33 import SDCategoryRecommendationV33
from openapi_client.models.sd_product_recommendations_v32 import SDProductRecommendationsV32
from openapi_client.models.sd_theme_recommendations_v34 import SDThemeRecommendationsV34
from typing import Optional, Set
from typing_extensions import Self

class SDTargetingRecommendationsV34(BaseModel):
    """
    For v3.4 the service will continue to return the recommendations returned for v3.2, return audience recommendations if requested, and return the theme expression used in product targeting if requested.
    """ # noqa: E501
    products: Optional[Annotated[List[SDProductRecommendationsV32], Field(min_length=0, max_length=1000)]] = Field(default=None, description="List of recommended product targets")
    categories: Optional[Annotated[List[SDCategoryRecommendationV33], Field(min_length=0, max_length=1000)]] = Field(default=None, description="List of recommended category targets")
    audiences: Optional[Annotated[List[SDAudienceCategoryRecommendations], Field(min_length=0, max_length=10)]] = Field(default=None, description="List of recommended audience targets, broken down by audience category")
    themes: Optional[SDThemeRecommendationsV34] = None
    __properties: ClassVar[List[str]] = ["products", "categories", "audiences", "themes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SDTargetingRecommendationsV34 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item in self.categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audiences (list)
        _items = []
        if self.audiences:
            for _item in self.audiences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['audiences'] = _items
        # override the default output from pydantic by calling `to_dict()` of themes
        if self.themes:
            _dict['themes'] = self.themes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SDTargetingRecommendationsV34 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "products": [SDProductRecommendationsV32.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "categories": [SDCategoryRecommendationV33.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "audiences": [SDAudienceCategoryRecommendations.from_dict(_item) for _item in obj["audiences"]] if obj.get("audiences") is not None else None,
            "themes": SDThemeRecommendationsV34.from_dict(obj["themes"]) if obj.get("themes") is not None else None
        })
        return _obj


