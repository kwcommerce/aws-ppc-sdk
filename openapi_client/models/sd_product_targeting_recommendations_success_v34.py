# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.sd_product_recommendation_v32 import SDProductRecommendationV32
from openapi_client.models.sd_product_targeting_theme_expression import SDProductTargetingThemeExpression
from typing import Optional, Set
from typing_extensions import Self

class SDProductTargetingRecommendationsSuccessV34(BaseModel):
    """
    Recommendation results for contextual targeting.
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="HTTP status code 200 indicating a successful response for product recommendations.")
    name: Optional[StrictStr] = Field(default=None, description="The theme name specified in the request.")
    expression: Optional[Annotated[List[SDProductTargetingThemeExpression], Field(min_length=1, max_length=1)]] = Field(default=None, description="A list of expressions defining the product targeting theme. The list will define an AND operator on different expressions. For example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations which are both with greater price and less review rating compared to the goal products. Note: currently the service only support one item in the array.")
    recommendations: Optional[Annotated[List[SDProductRecommendationV32], Field(min_length=1, max_length=100)]] = Field(default=None, description="A list of recommended products.")
    __properties: ClassVar[List[str]] = ["code", "name", "expression", "recommendations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SDProductTargetingRecommendationsSuccessV34 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in expression (list)
        _items = []
        if self.expression:
            for _item in self.expression:
                if _item:
                    _items.append(_item.to_dict())
            _dict['expression'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recommendations (list)
        _items = []
        if self.recommendations:
            for _item in self.recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recommendations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SDProductTargetingRecommendationsSuccessV34 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "name": obj.get("name"),
            "expression": [SDProductTargetingThemeExpression.from_dict(_item) for _item in obj["expression"]] if obj.get("expression") is not None else None,
            "recommendations": [SDProductRecommendationV32.from_dict(_item) for _item in obj["recommendations"]] if obj.get("recommendations") is not None else None
        })
        return _obj


