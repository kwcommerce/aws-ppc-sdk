# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.budget_increase_by import BudgetIncreaseBy
from openapi_client.models.performance_measure_condition import PerformanceMeasureCondition
from openapi_client.models.recurrence import Recurrence
from openapi_client.models.rule_duration import RuleDuration
from openapi_client.models.sd_rule_type import SDRuleType
from typing import Optional, Set
from typing_extensions import Self

class SDBudgetRuleDetails(BaseModel):
    """
    Object representing details of a budget rule for SD campaign
    """ # noqa: E501
    duration: Optional[RuleDuration] = None
    recurrence: Optional[Recurrence] = None
    rule_type: Optional[SDRuleType] = Field(default=None, alias="ruleType")
    budget_increase_by: Optional[BudgetIncreaseBy] = Field(default=None, alias="budgetIncreaseBy")
    name: Optional[Annotated[str, Field(strict=True, max_length=355)]] = Field(default=None, description="The budget rule name. Required to be unique within a campaign.")
    performance_measure_condition: Optional[PerformanceMeasureCondition] = Field(default=None, alias="performanceMeasureCondition")
    __properties: ClassVar[List[str]] = ["duration", "recurrence", "ruleType", "budgetIncreaseBy", "name", "performanceMeasureCondition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SDBudgetRuleDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurrence
        if self.recurrence:
            _dict['recurrence'] = self.recurrence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of budget_increase_by
        if self.budget_increase_by:
            _dict['budgetIncreaseBy'] = self.budget_increase_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_measure_condition
        if self.performance_measure_condition:
            _dict['performanceMeasureCondition'] = self.performance_measure_condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SDBudgetRuleDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": RuleDuration.from_dict(obj["duration"]) if obj.get("duration") is not None else None,
            "recurrence": Recurrence.from_dict(obj["recurrence"]) if obj.get("recurrence") is not None else None,
            "ruleType": obj.get("ruleType"),
            "budgetIncreaseBy": BudgetIncreaseBy.from_dict(obj["budgetIncreaseBy"]) if obj.get("budgetIncreaseBy") is not None else None,
            "name": obj.get("name"),
            "performanceMeasureCondition": PerformanceMeasureCondition.from_dict(obj["performanceMeasureCondition"]) if obj.get("performanceMeasureCondition") is not None else None
        })
        return _obj


