# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UpdateAdGroup(BaseModel):
    """
    UpdateAdGroup
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the ad group.")
    campaign_id: Optional[StrictInt] = Field(default=None, description="The identifier of the campaign.", alias="campaignId")
    default_bid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the default bid associated with the ad group. Used if no bid is specified.", alias="defaultBid")
    bid_optimization: Optional[StrictStr] = Field(default=None, description="Bid Optimization for the Adgroup. Default behavior is to optimize for clicks. Leads is only supported when using landingPageType of OFF_AMAZON_LINK. |Name|CostType|Description| |----|--------|-----------| |reach |vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks |cpc|[Default] Optimize for page visits.| |conversions |cpc|Optimize for conversion.| |leads |cpc| Optimize for lead generation.|", alias="bidOptimization")
    state: Optional[StrictStr] = Field(default=None, description="The state of the ad group.")
    ad_group_id: StrictInt = Field(description="The identifier of the ad group.", alias="adGroupId")
    __properties: ClassVar[List[str]] = ["name", "campaignId", "defaultBid", "bidOptimization", "state", "adGroupId"]

    @field_validator('bid_optimization')
    def bid_optimization_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['reach', 'clicks', 'conversions']):
            raise ValueError("must be one of enum values ('reach', 'clicks', 'conversions')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'paused', 'archived']):
            raise ValueError("must be one of enum values ('enabled', 'paused', 'archived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAdGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAdGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "campaignId": obj.get("campaignId"),
            "defaultBid": obj.get("defaultBid"),
            "bidOptimization": obj.get("bidOptimization"),
            "state": obj.get("state"),
            "adGroupId": obj.get("adGroupId")
        })
        return _obj


