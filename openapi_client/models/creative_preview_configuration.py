# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_preview_configuration_products_inner import CreativePreviewConfigurationProductsInner
from openapi_client.models.creative_preview_configuration_size import CreativePreviewConfigurationSize
from openapi_client.models.landing_page_type import LandingPageType
from typing import Optional, Set
from typing_extensions import Self

class CreativePreviewConfiguration(BaseModel):
    """
    Optional configuration for creative preview.
    """ # noqa: E501
    size: Optional[CreativePreviewConfigurationSize] = None
    products: Optional[List[CreativePreviewConfigurationProductsInner]] = Field(default=None, description="The products to preview. Currently only the first product is previewable.")
    landing_page_url: Optional[StrictStr] = Field(default=None, description="The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| The url should be in the format of https://www.amazon.com/stores/* (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. | |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)|", alias="landingPageUrl")
    landing_page_type: Optional[LandingPageType] = Field(default=None, alias="landingPageType")
    ad_name: Optional[StrictStr] = Field(default=None, description="The name of the ad. Note that this field is not supported when using ASIN or SKU fields.", alias="adName")
    is_mobile: Optional[StrictBool] = Field(default=None, description="Preview the creative as if it is on a mobile environment.", alias="isMobile")
    is_on_amazon: Optional[StrictBool] = Field(default=None, description="Preview the creative as if it is on an amazon site or third party site. The main difference is whether the preview will contain an AdChoices icon.", alias="isOnAmazon")
    __properties: ClassVar[List[str]] = ["size", "products", "landingPageUrl", "landingPageType", "adName", "isMobile", "isOnAmazon"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativePreviewConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativePreviewConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "size": CreativePreviewConfigurationSize.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "products": [CreativePreviewConfigurationProductsInner.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "landingPageUrl": obj.get("landingPageUrl"),
            "landingPageType": obj.get("landingPageType"),
            "adName": obj.get("adName"),
            "isMobile": obj.get("isMobile"),
            "isOnAmazon": obj.get("isOnAmazon")
        })
        return _obj


