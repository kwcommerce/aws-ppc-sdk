# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_moderation_policy_violations_inner_violating_brand_logo_contents_inner import CreativeModerationPolicyViolationsInnerViolatingBrandLogoContentsInner
from openapi_client.models.creative_moderation_policy_violations_inner_violating_headline_contents_inner import CreativeModerationPolicyViolationsInnerViolatingHeadlineContentsInner
from openapi_client.models.creative_moderation_policy_violations_inner_violating_video_contents_inner import CreativeModerationPolicyViolationsInnerViolatingVideoContentsInner
from typing import Optional, Set
from typing_extensions import Self

class CreativeModerationPolicyViolationsInner(BaseModel):
    """
    CreativeModerationPolicyViolationsInner
    """ # noqa: E501
    policy_description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the policy.", alias="policyDescription")
    policy_link_url: Optional[StrictStr] = Field(default=None, description="Address of the policy documentation. Follow the link to learn more about the specified policy.", alias="policyLinkUrl")
    violating_headline_contents: Optional[List[CreativeModerationPolicyViolationsInnerViolatingHeadlineContentsInner]] = Field(default=None, description="Information about the headline text that violates the specified policy.", alias="violatingHeadlineContents")
    violating_brand_logo_contents: Optional[List[CreativeModerationPolicyViolationsInnerViolatingBrandLogoContentsInner]] = Field(default=None, description="Information about the brand logo that violates the specified policy.", alias="violatingBrandLogoContents")
    violating_custom_image_contents: Optional[List[CreativeModerationPolicyViolationsInnerViolatingBrandLogoContentsInner]] = Field(default=None, description="Information about the custom image that violates the specified policy.", alias="violatingCustomImageContents")
    violating_video_contents: Optional[List[CreativeModerationPolicyViolationsInnerViolatingVideoContentsInner]] = Field(default=None, description="Information about the video that violates the specified policy.", alias="violatingVideoContents")
    __properties: ClassVar[List[str]] = ["policyDescription", "policyLinkUrl", "violatingHeadlineContents", "violatingBrandLogoContents", "violatingCustomImageContents", "violatingVideoContents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeModerationPolicyViolationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in violating_headline_contents (list)
        _items = []
        if self.violating_headline_contents:
            for _item in self.violating_headline_contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violatingHeadlineContents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in violating_brand_logo_contents (list)
        _items = []
        if self.violating_brand_logo_contents:
            for _item in self.violating_brand_logo_contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violatingBrandLogoContents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in violating_custom_image_contents (list)
        _items = []
        if self.violating_custom_image_contents:
            for _item in self.violating_custom_image_contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violatingCustomImageContents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in violating_video_contents (list)
        _items = []
        if self.violating_video_contents:
            for _item in self.violating_video_contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violatingVideoContents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeModerationPolicyViolationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policyDescription": obj.get("policyDescription"),
            "policyLinkUrl": obj.get("policyLinkUrl"),
            "violatingHeadlineContents": [CreativeModerationPolicyViolationsInnerViolatingHeadlineContentsInner.from_dict(_item) for _item in obj["violatingHeadlineContents"]] if obj.get("violatingHeadlineContents") is not None else None,
            "violatingBrandLogoContents": [CreativeModerationPolicyViolationsInnerViolatingBrandLogoContentsInner.from_dict(_item) for _item in obj["violatingBrandLogoContents"]] if obj.get("violatingBrandLogoContents") is not None else None,
            "violatingCustomImageContents": [CreativeModerationPolicyViolationsInnerViolatingBrandLogoContentsInner.from_dict(_item) for _item in obj["violatingCustomImageContents"]] if obj.get("violatingCustomImageContents") is not None else None,
            "violatingVideoContents": [CreativeModerationPolicyViolationsInnerViolatingVideoContentsInner.from_dict(_item) for _item in obj["violatingVideoContents"]] if obj.get("violatingVideoContents") is not None else None
        })
        return _obj


