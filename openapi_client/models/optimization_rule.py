# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.rule_condition import RuleCondition
from typing import Optional, Set
from typing_extensions import Self

class OptimizationRule(BaseModel):
    """
    OptimizationRule
    """ # noqa: E501
    state: Optional[StrictStr] = Field(default=None, description="The state of the optimization rule.")
    rule_name: Optional[StrictStr] = Field(default=None, description="The name of the optimization rule.", alias="ruleName")
    rule_conditions: Optional[Annotated[List[RuleCondition], Field(min_length=1, max_length=1)]] = Field(default=None, description="A list of rule conditions that define the advertiser's intent for the outcome of the rule. The rule uses 'AND' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.", alias="ruleConditions")
    rule_id: Optional[StrictStr] = Field(default=None, description="The identifier of the optimization rule.", alias="ruleId")
    __properties: ClassVar[List[str]] = ["state", "ruleName", "ruleConditions", "ruleId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'paused [COMING LATER]']):
            raise ValueError("must be one of enum values ('enabled', 'paused [COMING LATER]')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptimizationRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rule_conditions (list)
        _items = []
        if self.rule_conditions:
            for _item in self.rule_conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ruleConditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptimizationRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "ruleName": obj.get("ruleName"),
            "ruleConditions": [RuleCondition.from_dict(_item) for _item in obj["ruleConditions"]] if obj.get("ruleConditions") is not None else None,
            "ruleId": obj.get("ruleId")
        })
        return _obj


