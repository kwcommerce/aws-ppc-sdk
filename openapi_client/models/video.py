# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Video(BaseModel):
    """
    This field denotes video which is displayed on the ad. This field is optional and mutable. A video asset must be provided for a VIDEO creative. Specific restrictions based on the video are listed in the following table. ||Specifications| |------------------|------------------| |Maximum file size|500MB| |Aspect ratio|16:9| |Minimum duration|6s| |Maximum duration|45s| |Minimum frame size|1920x1080| |Minimum video bitrate|4mbps| |Video frame rate(fps)|23.976(recommended), 24, 25, or 29.97| |Video frame rate mode|Constant| |Minimum audio bitrate|192kbps| |Audio sample rate|44.1kHz or 48kHz| |Supported Formats|Video: H.264, MPEG-2, or MPEG-4; Audio: PCM or AAC| |Audio Channel|Audio format needs to be stereo or mono.| |Recommended video bitrate|8mbps| |Recommended duration|A duration of exactly 6s, 15s, 20s, or 30s is recommended. Use of videos outside of these durations may negatively impact your campaign performance. Shorter lengths will drive higher VCR (although scale on 6s may be limited).|
    """ # noqa: E501
    asset_id: StrictStr = Field(description="The unique identifier of the video asset. This assetId comes from the Creative Asset Library.", alias="assetId")
    asset_version: StrictStr = Field(description="The identifier of the particular video assetversion.", alias="assetVersion")
    __properties: ClassVar[List[str]] = ["assetId", "assetVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Video from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Video from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetId": obj.get("assetId"),
            "assetVersion": obj.get("assetVersion")
        })
        return _obj


