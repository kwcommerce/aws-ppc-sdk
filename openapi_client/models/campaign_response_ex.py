# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.rule_based_budget import RuleBasedBudget
from openapi_client.models.tactic import Tactic
from typing import Optional, Set
from typing_extensions import Self

class CampaignResponseEx(BaseModel):
    """
    CampaignResponseEx
    """ # noqa: E501
    campaign_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The identifier of the campaign.", alias="campaignId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the campaign.")
    tactic: Optional[Tactic] = None
    budget_type: Optional[StrictStr] = Field(default=None, description="The time period over which the amount specified in the `budget` property is allocated.", alias="budgetType")
    budget: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the budget.")
    start_date: Optional[StrictStr] = Field(default=None, description="The YYYYMMDD start date of the campaign. The date must be today or in the future.", alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, description="The YYYYMMDD end date of the campaign.", alias="endDate")
    state: Optional[StrictStr] = Field(default=None, description="The state of the campaign.")
    portfolio_id: Optional[StrictInt] = Field(default=None, description="Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.", alias="portfolioId")
    serving_status: Optional[StrictStr] = Field(default=None, description="The status of the campaign.", alias="servingStatus")
    cost_type: Optional[StrictStr] = Field(default=None, description="Determines how the campaign will bid and charge. |Name|Description| |----|----------|-----------| |cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm|The performance of this campaign is measured by the viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|", alias="costType")
    creation_date: Optional[StrictInt] = Field(default=None, description="Epoch date the campaign was created.", alias="creationDate")
    last_updated_date: Optional[StrictInt] = Field(default=None, description="Epoch date of the last update to any property associated with the campaign.", alias="lastUpdatedDate")
    rule_based_budget: Optional[RuleBasedBudget] = Field(default=None, alias="ruleBasedBudget")
    __properties: ClassVar[List[str]] = ["campaignId", "name", "tactic", "budgetType", "budget", "startDate", "endDate", "state", "portfolioId", "servingStatus", "costType", "creationDate", "lastUpdatedDate", "ruleBasedBudget"]

    @field_validator('budget_type')
    def budget_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['daily']):
            raise ValueError("must be one of enum values ('daily')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'paused', 'archived']):
            raise ValueError("must be one of enum values ('enabled', 'paused', 'archived')")
        return value

    @field_validator('serving_status')
    def serving_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADVERTISER_STATUS_ENABLED', 'STATUS_UNAVAILABLE', 'ADVERTISER_PAUSED', 'ACCOUNT_OUT_OF_BUDGET', 'ADVERTISER_PAYMENT_FAILURE', 'CAMPAIGN_PAUSED', 'CAMPAIGN_ARCHIVED', 'PENDING_START_DATE', 'ENDED', 'CAMPAIGN_OUT_OF_BUDGET', 'ADVERTISER_EXCEED_SPENDS_LIMIT', 'AD_POLICING_PENDING_REVIEW', 'CAMPAIGN_INCOMPLETE', 'INELIGIBLE', 'PORTFOLIO_ENDED', 'PORTFOLIO_OUT_OF_BUDGET', 'ADVERTISER_ARCHIVED', 'ADVERTISER_ACCOUNT_OUT_OF_BUDGET']):
            raise ValueError("must be one of enum values ('ADVERTISER_STATUS_ENABLED', 'STATUS_UNAVAILABLE', 'ADVERTISER_PAUSED', 'ACCOUNT_OUT_OF_BUDGET', 'ADVERTISER_PAYMENT_FAILURE', 'CAMPAIGN_PAUSED', 'CAMPAIGN_ARCHIVED', 'PENDING_START_DATE', 'ENDED', 'CAMPAIGN_OUT_OF_BUDGET', 'ADVERTISER_EXCEED_SPENDS_LIMIT', 'AD_POLICING_PENDING_REVIEW', 'CAMPAIGN_INCOMPLETE', 'INELIGIBLE', 'PORTFOLIO_ENDED', 'PORTFOLIO_OUT_OF_BUDGET', 'ADVERTISER_ARCHIVED', 'ADVERTISER_ACCOUNT_OUT_OF_BUDGET')")
        return value

    @field_validator('cost_type')
    def cost_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cpc', 'vcpm']):
            raise ValueError("must be one of enum values ('cpc', 'vcpm')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignResponseEx from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rule_based_budget
        if self.rule_based_budget:
            _dict['ruleBasedBudget'] = self.rule_based_budget.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignResponseEx from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaignId": obj.get("campaignId"),
            "name": obj.get("name"),
            "tactic": obj.get("tactic"),
            "budgetType": obj.get("budgetType"),
            "budget": obj.get("budget"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "state": obj.get("state"),
            "portfolioId": obj.get("portfolioId"),
            "servingStatus": obj.get("servingStatus"),
            "costType": obj.get("costType"),
            "creationDate": obj.get("creationDate"),
            "lastUpdatedDate": obj.get("lastUpdatedDate"),
            "ruleBasedBudget": RuleBasedBudget.from_dict(obj["ruleBasedBudget"]) if obj.get("ruleBasedBudget") is not None else None
        })
        return _obj


