# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ad_group import AdGroup
from openapi_client.models.campaign import Campaign
from openapi_client.models.negative_targeting_clause import NegativeTargetingClause
from openapi_client.models.optimization_rule import OptimizationRule
from openapi_client.models.product_ad import ProductAd
from openapi_client.models.sd_forecast_request_targeting_clause import SDForecastRequestTargetingClause
from typing import Optional, Set
from typing_extensions import Self

class SDForecastRequest(BaseModel):
    """
    Request payload for SD forecasting. Below are required and optional fields. Fields not listed will not impact forecast results. |Field              |Object            |Required| |-------------------|------------------|--------| |startDate          |Campaign          |required| |endDate            |Campaign          |optional| |costType           |Campaign          |optional| |bidOptimization    |AdGroup           |required| |creativeType       |AdGroup           |optional| |defaultBid         |AdGroup           |optional| |asin               |ProductAds        |required for vendors| |sku                |ProductAds        |required for sellers| |bid                |TargetingClauses  |required when defaultBid is not set| |expression         |TargetingClauses  |required| |ruleConditions     |OptimizationRules |optional|
    """ # noqa: E501
    campaign: Campaign
    ad_group: AdGroup = Field(alias="adGroup")
    optimization_rules: Optional[Annotated[List[OptimizationRule], Field(min_length=0, max_length=100)]] = Field(default=None, description="A list of SD optimization rules. Forecast will be affected by the optimization strategy rules.  Currently, supported rule metrics by forecast are `COST_PER_CLICK`, `COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS` and `COST_PER_ORDER`.", alias="optimizationRules")
    product_ads: Annotated[List[ProductAd], Field(min_length=1, max_length=100)] = Field(alias="productAds")
    targeting_clauses: Annotated[List[SDForecastRequestTargetingClause], Field(min_length=1, max_length=100)] = Field(description="A list of SD targeting clauses.", alias="targetingClauses")
    negative_targeting_clauses: Optional[Annotated[List[NegativeTargetingClause], Field(min_length=1, max_length=100)]] = Field(default=None, description="A list of SD negative targeting clauses.", alias="negativeTargetingClauses")
    __properties: ClassVar[List[str]] = ["campaign", "adGroup", "optimizationRules", "productAds", "targetingClauses", "negativeTargetingClauses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SDForecastRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of campaign
        if self.campaign:
            _dict['campaign'] = self.campaign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ad_group
        if self.ad_group:
            _dict['adGroup'] = self.ad_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in optimization_rules (list)
        _items = []
        if self.optimization_rules:
            for _item in self.optimization_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['optimizationRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_ads (list)
        _items = []
        if self.product_ads:
            for _item in self.product_ads:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productAds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targeting_clauses (list)
        _items = []
        if self.targeting_clauses:
            for _item in self.targeting_clauses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['targetingClauses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in negative_targeting_clauses (list)
        _items = []
        if self.negative_targeting_clauses:
            for _item in self.negative_targeting_clauses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['negativeTargetingClauses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SDForecastRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaign": Campaign.from_dict(obj["campaign"]) if obj.get("campaign") is not None else None,
            "adGroup": AdGroup.from_dict(obj["adGroup"]) if obj.get("adGroup") is not None else None,
            "optimizationRules": [OptimizationRule.from_dict(_item) for _item in obj["optimizationRules"]] if obj.get("optimizationRules") is not None else None,
            "productAds": [ProductAd.from_dict(_item) for _item in obj["productAds"]] if obj.get("productAds") is not None else None,
            "targetingClauses": [SDForecastRequestTargetingClause.from_dict(_item) for _item in obj["targetingClauses"]] if obj.get("targetingClauses") is not None else None,
            "negativeTargetingClauses": [NegativeTargetingClause.from_dict(_item) for _item in obj["negativeTargetingClauses"]] if obj.get("negativeTargetingClauses") is not None else None
        })
        return _obj


