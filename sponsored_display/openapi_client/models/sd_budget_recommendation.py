# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi_client.models.sd_seven_days_missed_opportunities import SDSevenDaysMissedOpportunities
from typing import Optional, Set
from typing_extensions import Self

class SDBudgetRecommendation(BaseModel):
    """
    SDBudgetRecommendation
    """ # noqa: E501
    index: StrictInt = Field(description="Correlate the recommendation to the campaign index in the request. Zero-based.")
    campaign_id: StrictStr = Field(description="Campaign id.", alias="campaignId")
    suggested_budget: Union[StrictFloat, StrictInt] = Field(description="Recommended budget for the campaign. This will be in local currency.", alias="suggestedBudget")
    seven_days_missed_opportunities: SDSevenDaysMissedOpportunities = Field(alias="sevenDaysMissedOpportunities")
    __properties: ClassVar[List[str]] = ["index", "campaignId", "suggestedBudget", "sevenDaysMissedOpportunities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SDBudgetRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of seven_days_missed_opportunities
        if self.seven_days_missed_opportunities:
            _dict['sevenDaysMissedOpportunities'] = self.seven_days_missed_opportunities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SDBudgetRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index": obj.get("index"),
            "campaignId": obj.get("campaignId"),
            "suggestedBudget": obj.get("suggestedBudget"),
            "sevenDaysMissedOpportunities": SDSevenDaysMissedOpportunities.from_dict(obj["sevenDaysMissedOpportunities"]) if obj.get("sevenDaysMissedOpportunities") is not None else None
        })
        return _obj


