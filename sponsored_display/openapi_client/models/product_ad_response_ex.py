# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.landing_page_type import LandingPageType
from typing import Optional, Set
from typing_extensions import Self

class ProductAdResponseEx(BaseModel):
    """
    ProductAdResponseEx
    """ # noqa: E501
    ad_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The identifier of the ad.", alias="adId")
    ad_group_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The identifier of the ad group associated with the ad.", alias="adGroupId")
    campaign_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The identifier of the campaign associated with the ad.", alias="campaignId")
    landing_page_url: Optional[StrictStr] = Field(default=None, description="The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| The url should be in the format of https://www.amazon.com/stores/* (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. | |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)|", alias="landingPageURL")
    landing_page_type: Optional[LandingPageType] = Field(default=None, alias="landingPageType")
    ad_name: Optional[StrictStr] = Field(default=None, description="The name of the ad. Note that this field is not supported when using ASIN or SKU fields.", alias="adName")
    asin: Optional[StrictStr] = Field(default=None, description="The ASIN of the product being advertised. This parameter is included in the response for sellers and vendors.")
    sku: Optional[StrictStr] = Field(default=None, description="The SKU of the product being advertised. This parameter is included in the response for sellers.")
    state: Optional[StrictStr] = Field(default=None, description="The state of the product ad.")
    serving_status: Optional[StrictStr] = Field(default=None, description="The status of the product ad.", alias="servingStatus")
    creation_date: Optional[StrictInt] = Field(default=None, description="Epoch date the product ad was created.", alias="creationDate")
    last_updated_date: Optional[StrictInt] = Field(default=None, description="Epoch date of the last update to any property associated with the product ad.", alias="lastUpdatedDate")
    __properties: ClassVar[List[str]] = ["adId", "adGroupId", "campaignId", "landingPageURL", "landingPageType", "adName", "asin", "sku", "state", "servingStatus", "creationDate", "lastUpdatedDate"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'paused', 'archived']):
            raise ValueError("must be one of enum values ('enabled', 'paused', 'archived')")
        return value

    @field_validator('serving_status')
    def serving_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADVERTISER_STATUS_ENABLED', 'STATUS_UNAVAILABLE', 'ADVERTISER_PAUSED', 'ACCOUNT_OUT_OF_BUDGET', 'ADVERTISER_PAYMENT_FAILURE', 'CAMPAIGN_PAUSED', 'CAMPAIGN_ARCHIVED', 'PENDING_START_DATE', 'ENDED', 'CAMPAIGN_OUT_OF_BUDGET', 'AD_GROUP_STATUS_ENABLED', 'AD_GROUP_PAUSED', 'AD_GROUP_ARCHIVED', 'AD_GROUP_INCOMPLETE', 'AD_GROUP_LOW_BID', 'AD_STATUS_LIVE', 'AD_STATUS_PAUSED', 'AD_STATUS_ARCHIVED', 'MISSING_IMAGE', 'MISSING_DECORATION', 'NOT_BUYABLE', 'NOT_IN_BUYBOX', 'OUT_OF_STOCK', 'NOT_IN_POLICY', 'ADVERTISER_EXCEED_SPENDS_LIMIT', 'AD_POLICING_PENDING_REVIEW', 'CAMPAIGN_INCOMPLETE', 'INELIGIBLE', 'PORTFOLIO_ENDED', 'PORTFOLIO_OUT_OF_BUDGET', 'ADVERTISER_ARCHIVED', 'ADVERTISER_ACCOUNT_OUT_OF_BUDGET']):
            raise ValueError("must be one of enum values ('ADVERTISER_STATUS_ENABLED', 'STATUS_UNAVAILABLE', 'ADVERTISER_PAUSED', 'ACCOUNT_OUT_OF_BUDGET', 'ADVERTISER_PAYMENT_FAILURE', 'CAMPAIGN_PAUSED', 'CAMPAIGN_ARCHIVED', 'PENDING_START_DATE', 'ENDED', 'CAMPAIGN_OUT_OF_BUDGET', 'AD_GROUP_STATUS_ENABLED', 'AD_GROUP_PAUSED', 'AD_GROUP_ARCHIVED', 'AD_GROUP_INCOMPLETE', 'AD_GROUP_LOW_BID', 'AD_STATUS_LIVE', 'AD_STATUS_PAUSED', 'AD_STATUS_ARCHIVED', 'MISSING_IMAGE', 'MISSING_DECORATION', 'NOT_BUYABLE', 'NOT_IN_BUYBOX', 'OUT_OF_STOCK', 'NOT_IN_POLICY', 'ADVERTISER_EXCEED_SPENDS_LIMIT', 'AD_POLICING_PENDING_REVIEW', 'CAMPAIGN_INCOMPLETE', 'INELIGIBLE', 'PORTFOLIO_ENDED', 'PORTFOLIO_OUT_OF_BUDGET', 'ADVERTISER_ARCHIVED', 'ADVERTISER_ACCOUNT_OUT_OF_BUDGET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductAdResponseEx from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductAdResponseEx from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adId": obj.get("adId"),
            "adGroupId": obj.get("adGroupId"),
            "campaignId": obj.get("campaignId"),
            "landingPageURL": obj.get("landingPageURL"),
            "landingPageType": obj.get("landingPageType"),
            "adName": obj.get("adName"),
            "asin": obj.get("asin"),
            "sku": obj.get("sku"),
            "state": obj.get("state"),
            "servingStatus": obj.get("servingStatus"),
            "creationDate": obj.get("creationDate"),
            "lastUpdatedDate": obj.get("lastUpdatedDate")
        })
        return _obj


