# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_cropping_coordinates import ImageCroppingCoordinates
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    This field denotes image which is displayed on the ad. This can either be a brand logo or a custom image. This field is optional and mutable. For custom image, both rectCustomImage and squareCustomImage should use the same asset id and asset version. Specific restrictions based on the Image type are listed in the following table. |Image type|Maximum file size|Minimum width|Minimum height|Accepted file formats| |------|-----------|-----------|-----------|-----------| |Custom Image|5MB|1200|628|JPEG, JPG, PNG, GIF| |Brand Logo|1MB|600|100|JPEG, JPG, PNG| Note: For square custom images the cropped image should be 628x628 at minimum.
    """ # noqa: E501
    asset_id: StrictStr = Field(description="The unique identifier of the image asset. This assetId comes from the Creative Asset Library.", alias="assetId")
    asset_version: StrictStr = Field(description="The identifier of the particular image assetversion.", alias="assetVersion")
    cropping_coordinates: Optional[ImageCroppingCoordinates] = Field(default=None, alias="croppingCoordinates")
    __properties: ClassVar[List[str]] = ["assetId", "assetVersion", "croppingCoordinates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cropping_coordinates
        if self.cropping_coordinates:
            _dict['croppingCoordinates'] = self.cropping_coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetId": obj.get("assetId"),
            "assetVersion": obj.get("assetVersion"),
            "croppingCoordinates": ImageCroppingCoordinates.from_dict(obj["croppingCoordinates"]) if obj.get("croppingCoordinates") is not None else None
        })
        return _obj


