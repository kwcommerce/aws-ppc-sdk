# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.brand_safety_deny_list_domain_state import BrandSafetyDenyListDomainState
from openapi_client.models.brand_safety_deny_list_domain_type import BrandSafetyDenyListDomainType
from typing import Optional, Set
from typing_extensions import Self

class BrandSafetyDenyListProcessedDomain(BaseModel):
    """
    BrandSafetyDenyListProcessedDomain
    """ # noqa: E501
    domain_id: Optional[StrictInt] = Field(default=None, description="The identifier of the Brand Safety List domain.", alias="domainId")
    name: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps) ")
    type: Optional[BrandSafetyDenyListDomainType] = None
    state: Optional[BrandSafetyDenyListDomainState] = BrandSafetyDenyListDomainState.ENABLED
    created_at: Optional[datetime] = Field(default=None, description="The date time the domain was created at. Format YYYY-MM-ddT:HH:mm:ssZ", alias="createdAt")
    last_modified: Optional[datetime] = Field(default=None, description="The date time the domain was last modified. Format YYYY-MM-ddT:HH:mm:ssZ", alias="lastModified")
    __properties: ClassVar[List[str]] = ["domainId", "name", "type", "state", "createdAt", "lastModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrandSafetyDenyListProcessedDomain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrandSafetyDenyListProcessedDomain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domainId": obj.get("domainId"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "state": obj.get("state") if obj.get("state") is not None else BrandSafetyDenyListDomainState.ENABLED,
            "createdAt": obj.get("createdAt"),
            "lastModified": obj.get("lastModified")
        })
        return _obj


