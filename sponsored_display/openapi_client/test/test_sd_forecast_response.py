# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sd_forecast_response import SDForecastResponse

class TestSDForecastResponse(unittest.TestCase):
    """SDForecastResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SDForecastResponse:
        """Test SDForecastResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SDForecastResponse`
        """
        model = SDForecastResponse()
        if include_optional:
            return SDForecastResponse(
                bid_optimization = '',
                lifetime_forecasts = [
                    openapi_client.models.forecast.Forecast(
                        metric = 'IMPRESSIONS', 
                        value = openapi_client.models.forecast_range.ForecastRange(
                            min = 56, 
                            max = 56, ), )
                    ],
                weekly_forecasts = [
                    openapi_client.models.forecast.Forecast(
                        metric = 'IMPRESSIONS', 
                        value = openapi_client.models.forecast_range.ForecastRange(
                            min = 56, 
                            max = 56, ), )
                    ],
                daily_forecasts = [
                    openapi_client.models.forecast.Forecast(
                        metric = 'IMPRESSIONS', 
                        value = openapi_client.models.forecast_range.ForecastRange(
                            min = 56, 
                            max = 56, ), )
                    ],
                curves = [
                    openapi_client.models.curve.Curve(
                        meet_threshold = True, 
                        graph = 'BUDGET', 
                        points = [
                            openapi_client.models.curve_point.CurvePoint(
                                is_focus = True, 
                                x = [
                                    openapi_client.models.curve_point_fixed_value.CurvePointFixedValue(
                                        value = null, )
                                    ], 
                                y = [
                                    openapi_client.models.curve_point_ranged_value.CurvePointRangedValue(
                                        label = 'CLICKS', 
                                        value = openapi_client.models.forecast_range_double.ForecastRangeDouble(
                                            min = null, 
                                            mean = null, 
                                            max = null, ), )
                                    ], )
                            ], )
                    ],
                forecast_status = 'IMPRESSION_TARGETING_TOO_NARROW'
            )
        else:
            return SDForecastResponse(
        )
        """

    def testSDForecastResponse(self):
        """Test SDForecastResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
